%The function takes in a list of datafile names (generated by the dir
%command) and performs a runnning average. The function also returns
%some scaling parameters for the LeCroy traces
%Input: data, list of filenames of data to process in a folder (.trc or .txt)
%Input: RSArange, range of the RSA (300 or 600 MHz typically)
%Input: numtoskip, number of traces to skip before starting averaging
%Output: xaxis, time or frequency data from trace (depends on trace type)
%Output: yaxis, averaged amplitudes of traces
%Output: xint, xoff, time step and time offset of LeCroy samples
%Output: ygain, yoff, scale factor and y offset for LeCroy amplitudes

function [xaxis,normAxis,echoAxis,xInt,xOff,normGain,normOff,...
    echoGain,echoOff,histogramData] = doAVG_echo(echoDat,normDat,numtoskip)

numfiles = length(echoDat); %get number of files to process

if(isempty(echoDat))
    disp('no data of this type, returning default values')
    normAxis = 0;
    xaxis = 0;
    xInt  = 1; %x time step
    xOff  = 0; %x offset
    normGain = 1; %y gain
    normOff  = 0; %y offset
    return 
end

% normAxis = 0;
% xaxis = 0;
xInt  = 1; %x time step
xOff  = 0; %x offset
normGain = 1; %y gain
normOff  = 0; %y offset

% the new part. we find the peak in each probe data set.
peaks= zeros(numfiles-numtoskip,1);
for k=numtoskip+1:numfiles
    [wave,~,~,...
        normGain,normOff]= ReadLeCroyBinaryWaveformExtra(normDat(k).name);
    
    if k-numtoskip == 1
        offsetNorm= zeros(length(wave.y),numfiles-numtoskip);
        offsetEcho= offsetNorm;
    end

    [~,peaks(k)]= max(wave.y);
    offsetNorm(:,k-numtoskip)= wave.y; 
    
    [wave,xInt,xOff,...
        echoGain,echoOff]= ReadLeCroyBinaryWaveformExtra(echoDat(k).name);
    offsetEcho(:,k-numtoskip)= wave.y; 
    
    time= wave.x;
end

% now instead of simply averaging, we first align all the traces in time.
alignedNorm= zeros(size(offsetNorm));
alignedEcho= alignedNorm;

for k=numtoskip+1:numfiles
    baselineNorm= mean(offsetNorm(:,k-numtoskip));
    alignedNorm(:,k-numtoskip)= [baselineNorm*...
        ones( max(peaks)-peaks(k-numtoskip),1 );...
        offsetNorm(1:end-max(peaks)+peaks(k-numtoskip),k-numtoskip)];
    
    baselineEcho= mean(offsetEcho(:,k-numtoskip));
    alignedEcho(:,k-numtoskip)= [baselineEcho*...
        ones( max(peaks)-peaks(k-numtoskip),1 );...
        offsetEcho(1:end-max(peaks)+peaks(k-numtoskip),k-numtoskip)];
    plot(time,alignedEcho(:,k-numtoskip)+k-numtoskip-1)
    
end

normAxis= mean(alignedNorm,2);
echoAxis= mean(alignedEcho,2);

xaxis= time';

%convert y values back to int16 to store more efficiently  
normAxis= int16( (normOff+normAxis')/normGain );
echoAxis= int16( (echoOff+echoAxis')/echoGain );

% histData= echoHistogram(xaxis,alignedEcho-baselineEcho,10)

alignedEcho= alignedEcho(time>1.4e-6,:);
time= time(time>1.4e-6);

% time= avgByNs(time,10);
%els= length(time);
%finalEcho= zeros(els,size(alignedEcho,2));

for j=1:size(alignedEcho,2)
    %finalEcho(:,j)= avgByNs(alignedEcho(:,j),10);
    alignedEcho(:,j)= smooth(alignedEcho(:,j),14);
end

%[pk,index]= max(finalEcho);
[pk,index]= max(alignedEcho);
histogramData= [pk',time(index')];

end
 
