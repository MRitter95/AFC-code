%The function takes in a list of datafile names (generated by the dir
%command) and performs a runnning average. The function also returns
%some scaling parameters for the LeCroy traces
%Input: data, list of filenames of data to process in a folder (.trc or .txt)
%Input: RSArange, range of the RSA (300 or 600 MHz typically)
%Input: numtoskip, number of traces to skip before starting averaging
%Output: xaxis, time or frequency data from trace (depends on trace type)
%Output: yaxis, averaged amplitudes of traces
%Output: xint, xoff, time step and time offset of LeCroy samples
%Output: ygain, yoff, scale factor and y offset for LeCroy amplitudes

function [xaxis, yaxis, xint, xoff, ygain, yoff] = doAVG_echo(echoDat, normDat, RSArange, numtoskip)

numfiles = length(echoDat); %get number of files to process

if(isempty(data))
    disp('no data of this type, returning default values')
    yaxis = 0;
    xaxis = 0;
    xint  = 1; %x time step
    xoff  = 0; %x offset
    ygain = 1; %y gain
    yoff  = 0; %y offset
    return 
end

[~, ~, ext] = fileparts(echoDat(1).name); %get extension to choose which method to use

yaxis = 0;
xaxis = 0;
xint  = 1; %x time step
xoff  = 0; %x offset
ygain = 1; %y gain
yoff  = 0; %y offset

% the new part. we find the peak in each probe data set.
offsetTrace= [];
peaks= zeros(numfiles-numtoskip,1);
for k=numtoskip+1:numfiles
    [wave, xint, xoff, ygain, yoff] = ReadLeCroyBinaryWaveformExtra(data(k).name);
    
    [pk,loc] = findpeaks(wave.y,'MinPeakDistance',1e-5);
    blah= sortrows([pk,loc],'descend');
    
    peaks(k)= loc;
    time= wave.x;
    offsetTrace= [offsetTrace,wave.y];
end

% now instead of simply averaging, we first align all the traces in time.
alignedTrace= [zeros( max(peaks)-min(peaks),numfiles-numtoskip );...
    zeros(size(offsetTrace))];
for k=numtoskip+1:numfiles
    baseline= mean(alignedTrace(:,k);
    alignedTrace(:,k)= [baseline*ones( max(peaks)-peaks(k),1 );...
        offsetTrace(:,k)];
end

yaxis= mean(offsetTrace,2);

% we have to pad the x axis as well.
xaxis= [time',linspace(time(end),...
    time(end)+(max(peaks)-min(peaks))*(time(end)-time(end-1)),...
    max(peaks)-min(peaks))];

%convert y values back to int16 to store more efficiently  
yaxis = int16((yaxis'+yoff)/ygain);
 
