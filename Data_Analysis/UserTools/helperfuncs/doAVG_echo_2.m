%The function takes in a list of datafile names (generated by the dir
%command) and performs a runnning average. The function also returns
%some scaling parameters for the LeCroy traces
%Input: data, list of filenames of data to process in a folder (.trc or .txt)
%Input: RSArange, range of the RSA (300 or 600 MHz typically)
%Output: xaxis, time or frequency data from trace (depends on trace type)
%Output: yaxis, averaged amplitudes of traces
%Output: xint, xoff, time step and time offset of LeCroy samples
%Output: ygain, yoff, scale factor and y offset for LeCroy amplitudes

function [xInt,xOff,normGain,normOff,echoGain,echoOff,...
    histogramData] = doAVG_echo_2(echoDat,normDat)

numfiles = length(echoDat); %get number of files to process

if(isempty(echoDat))
    disp('no data of this type, returning default values')
    xInt  = 1; %x time step
    xOff  = 0; %x offset
    normGain = 1; %y gain
    normOff  = 0; %y offset
    return 
end

% normAxis = 0;
% xaxis = 0;
xInt  = 1; %x time step
xOff  = 0; %x offset
normGain = 1; %y gain
normOff  = 0; %y offset

%we are now using smooth(.,.)+findpeaks() to correct jitter and also to
%find echo peaks. the trick seems to be to use a pretty large number for
%smooth, comparable to the peak width. the trace is sampled 10points/ns and
%the pulse is about 10ns FWHM, so we'll use 100 as the smoothing parameter.
smoothWidth= 100;

%echo peaks are expected to be 10ns FWHM. so if we find something less than
%that we'll ignore it:
minWidth= 10e-9;


% the new part. we find the peak in each probe data set.
peaks= zeros(numfiles,1);
for k=1:numfiles
    [wave,~,~,...
        normGain,normOff]= ReadLeCroyBinaryWaveformExtra(normDat(k).name);
    
    if k == 1
        offsetNorm= zeros(length(wave.y),numfiles);
        offsetEcho= offsetNorm;
    end

    %locate input det. pulse by smoothing and finding peak, instead of max
    %looking at the traces after smoothing, peaks appear to have prominence
    %of 2, so using 1 should be safe.
    offsetNorm(:,k)= smooth(wave.y,smoothWidth);
%     [~,peaks(k)]= max(wave.y);
    [~,peaks(k)]= findpeaks(offsetNorm(:,k),...
        'MinPeakProminence',1);
    
    [wave,xInt,xOff,...
        echoGain,echoOff]= ReadLeCroyBinaryWaveformExtra(echoDat(k).name);
    offsetEcho(:,k)= smooth(wave.y,smoothWidth); 
    
    time= wave.x;
end

% now instead of simply averaging, we first align all the traces in time.
alignedNorm= zeros(size(offsetNorm));
alignedEcho= alignedNorm;

for k=1:numfiles
    baselineNorm= mean(offsetNorm(:,k));
    alignedNorm(:,k)= [baselineNorm*...
        ones( max(peaks)-peaks(k),1 );...
        offsetNorm(1:end-max(peaks)+peaks(k),k)];
    
    baselineEcho= mean(offsetEcho(:,k));
    alignedEcho(:,k)= [baselineEcho*...
        ones( max(peaks)-peaks(k),1 );...
        offsetEcho(1:end-max(peaks)+peaks(k),k)];
%     plot(time,5*alignedEcho(:,k)+0.5*(k-1),...
%         'Color',[0, 0.4470, 0.7410]);
end

% normAxis= mean(alignedNorm,2);
% echoAxis= mean(alignedEcho,2);
% 
% xaxis= time';
% 
% %convert y values back to int16 to store more efficiently  
% normAxis= int16( (normOff+normAxis')/normGain );
% echoAxis= int16( (echoOff+echoAxis')/echoGain );

% histData= echoHistogram(xaxis,alignedEcho-baselineEcho,10)


%since I was previously simply using max, I had to eliminate the
%transmission peak, and I did this by cutting off the start of the trace:
%not ideal, since I have to hard-code a time value that works. now that we
%can find multiple peaks, there's no need for this.

% alignedEcho= alignedEcho(time>1.4e-6,:);
% time= time(time>1.4e-6);

%[pk,index]= max(finalEcho);
histogramData= cell(numfiles);
figure
hold on
for j=1:numfiles
    [pks,locs,w,~]= findpeaks(alignedEcho(:,j),time,...
        'MinPeakProminence',0.01);
    
    pks(w<minWidth)= [];
    locs(w<minWidth)= [];
    w(w<minWidth)= [];
    
    histogramData{j}= [pks,locs,w];
    
    plot(time,5*alignedEcho(:,j)+0.5*(j-1),'Color',[0, 0.4470, 0.7410]);
    plot(locs,5*pks+0.5*(j-1),'ok')
        
%     findpeaks(5*alignedEcho(:,k)+0.5*(k-1),time,...
%         'MinPeakProminence',0.05);    
end

% [pk,index]= max(alignedEcho);
% histogramData= [pk',time(index')];

end
 
