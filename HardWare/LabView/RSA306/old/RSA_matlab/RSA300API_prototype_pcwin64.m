function [methodinfo,structs,enuminfo,ThunkLibName]=RSA300API_prototype_pcwin64
%RSA300API_PROTOTYPE_PCWIN64 Create structures to define interfaces found in 'RSA300API'.

%This function was generated by loadlibrary.m parser version 1.1.6.38 on Fri Jan 16 13:40:02 2015
%perl options:'RSA300API.i -outfile=RSA300API_prototype_pcwin64.m -thunkfile=RSA300API_thunk_pcwin64.dll.c -header=RSA300API.h'
ival={cell(1,0)}; % change 0 to the actual number of functions to preallocate the data.
structs=[];enuminfo=[];fcnNum=1;
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival,'thunkname', ival);
MfilePath=fileparts(mfilename('fullpath'));
ThunkLibName=fullfile(MfilePath,'RSA300API_thunk_pcwin64.dll');
%  ReturnStatus Search ( long deviceIDs [], wchar_t * deviceSerial [], int * numDevicesFound ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Search'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'longPtr', 'uint16PtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
%  ReturnStatus Connect ( long deviceID ); 
fcns.thunkname{fcnNum}='ReturnStatuslongThunk';fcns.name{fcnNum}='Connect'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
%  ReturnStatus ResetDevice ( long deviceID ); 
fcns.thunkname{fcnNum}='ReturnStatuslongThunk';fcns.name{fcnNum}='ResetDevice'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
%  ReturnStatus Disconnect (); 
fcns.thunkname{fcnNum}='ReturnStatusThunk';fcns.name{fcnNum}='Disconnect'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  ReturnStatus GetAPIVersion ( char * apiVersion ); 
fcns.thunkname{fcnNum}='ReturnStatuscstringThunk';fcns.name{fcnNum}='GetAPIVersion'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
%  ReturnStatus GetFirmwareVersion ( char * fwVersion ); 
fcns.thunkname{fcnNum}='ReturnStatuscstringThunk';fcns.name{fcnNum}='GetFirmwareVersion'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
%  ReturnStatus GetFPGAVersion ( char * fpgaVersion ); 
fcns.thunkname{fcnNum}='ReturnStatuscstringThunk';fcns.name{fcnNum}='GetFPGAVersion'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
%  ReturnStatus GetHWVersion ( char * hwVersion ); 
fcns.thunkname{fcnNum}='ReturnStatuscstringThunk';fcns.name{fcnNum}='GetHWVersion'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
%  ReturnStatus GetDeviceSerialNumber ( char * serialNum ); 
fcns.thunkname{fcnNum}='ReturnStatuscstringThunk';fcns.name{fcnNum}='GetDeviceSerialNumber'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
%  ReturnStatus GetDeviceNomenclature ( char * nomenclature ); 
fcns.thunkname{fcnNum}='ReturnStatuscstringThunk';fcns.name{fcnNum}='GetDeviceNomenclature'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
%  const char * GetErrorString ( ReturnStatus status ); 
fcns.thunkname{fcnNum}='cstringReturnStatusThunk';fcns.name{fcnNum}='GetErrorString'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'ReturnStatus'};fcnNum=fcnNum+1;
%  ReturnStatus Run (); 
fcns.thunkname{fcnNum}='ReturnStatusThunk';fcns.name{fcnNum}='Run'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  ReturnStatus Stop (); 
fcns.thunkname{fcnNum}='ReturnStatusThunk';fcns.name{fcnNum}='Stop'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  ReturnStatus GetRunState ( RunMode * runMode ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrThunk';fcns.name{fcnNum}='GetRunState'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'RunModePtr'};fcnNum=fcnNum+1;
%  ReturnStatus Preset (); 
fcns.thunkname{fcnNum}='ReturnStatusThunk';fcns.name{fcnNum}='Preset'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  ReturnStatus SetReferenceLevel ( double refLevel ); 
fcns.thunkname{fcnNum}='ReturnStatusdoubleThunk';fcns.name{fcnNum}='SetReferenceLevel'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
%  ReturnStatus GetReferenceLevel ( double * refLevel ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrThunk';fcns.name{fcnNum}='GetReferenceLevel'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'doublePtr'};fcnNum=fcnNum+1;
%  ReturnStatus SetCenterFreq ( double cf ); 
fcns.thunkname{fcnNum}='ReturnStatusdoubleThunk';fcns.name{fcnNum}='SetCenterFreq'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
%  ReturnStatus GetCenterFreq ( double * cf ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrThunk';fcns.name{fcnNum}='GetCenterFreq'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'doublePtr'};fcnNum=fcnNum+1;
%  ReturnStatus GetTunedCenterFreq ( double * cf ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrThunk';fcns.name{fcnNum}='GetTunedCenterFreq'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'doublePtr'};fcnNum=fcnNum+1;
%  ReturnStatus SetIQBandwidth ( double iqBandwidth ); 
fcns.thunkname{fcnNum}='ReturnStatusdoubleThunk';fcns.name{fcnNum}='SetIQBandwidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
%  ReturnStatus GetIQBandwidth ( double * iqBandwidth ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrThunk';fcns.name{fcnNum}='GetIQBandwidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'doublePtr'};fcnNum=fcnNum+1;
%  ReturnStatus GetIQSampleRate ( double * iqSampleRate ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrThunk';fcns.name{fcnNum}='GetIQSampleRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'doublePtr'};fcnNum=fcnNum+1;
%  ReturnStatus SetIQRecordLength ( long recordLength ); 
fcns.thunkname{fcnNum}='ReturnStatuslongThunk';fcns.name{fcnNum}='SetIQRecordLength'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
%  ReturnStatus GetIQRecordLength ( long * recordLength ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrThunk';fcns.name{fcnNum}='GetIQRecordLength'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'longPtr'};fcnNum=fcnNum+1;
%  ReturnStatus SetExternalRefEnable ( bool exRefEn ); 
fcns.thunkname{fcnNum}='ReturnStatusboolThunk';fcns.name{fcnNum}='SetExternalRefEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'bool'};fcnNum=fcnNum+1;
%  ReturnStatus GetExternalRefEnable ( bool * exRefEn ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrThunk';fcns.name{fcnNum}='GetExternalRefEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'boolPtr'};fcnNum=fcnNum+1;
%  ReturnStatus GetMaxIQBandwidth ( double * maxBandwidth ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrThunk';fcns.name{fcnNum}='GetMaxIQBandwidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'doublePtr'};fcnNum=fcnNum+1;
%  ReturnStatus GetMinIQBandwidth ( double * minBandwidth ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrThunk';fcns.name{fcnNum}='GetMinIQBandwidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'doublePtr'};fcnNum=fcnNum+1;
%  ReturnStatus GetMaxCenterFreq ( double * maxCF ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrThunk';fcns.name{fcnNum}='GetMaxCenterFreq'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'doublePtr'};fcnNum=fcnNum+1;
%  ReturnStatus GetMaxAcquisitionSamples ( unsigned long * maxSamples ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrThunk';fcns.name{fcnNum}='GetMaxAcquisitionSamples'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'ulongPtr'};fcnNum=fcnNum+1;
%  ReturnStatus ForceTrigger (); 
fcns.thunkname{fcnNum}='ReturnStatusThunk';fcns.name{fcnNum}='ForceTrigger'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  ReturnStatus SetTriggerPositionPercent ( double trigPosPercent ); 
fcns.thunkname{fcnNum}='ReturnStatusdoubleThunk';fcns.name{fcnNum}='SetTriggerPositionPercent'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
%  ReturnStatus GetTriggerPositionPercent ( double * trigPosPercent ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrThunk';fcns.name{fcnNum}='GetTriggerPositionPercent'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'doublePtr'};fcnNum=fcnNum+1;
%  ReturnStatus SetTriggerMode ( TriggerMode mode ); 
fcns.thunkname{fcnNum}='ReturnStatusTriggerModeThunk';fcns.name{fcnNum}='SetTriggerMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'TriggerMode'};fcnNum=fcnNum+1;
%  ReturnStatus GetTriggerMode ( TriggerMode * mode ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrThunk';fcns.name{fcnNum}='GetTriggerMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'TriggerModePtr'};fcnNum=fcnNum+1;
%  ReturnStatus SetTriggerTransition ( TriggerTransition transition ); 
fcns.thunkname{fcnNum}='ReturnStatusTriggerTransitionThunk';fcns.name{fcnNum}='SetTriggerTransition'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'TriggerTransition'};fcnNum=fcnNum+1;
%  ReturnStatus GetTriggerTransition ( TriggerTransition * transition ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrThunk';fcns.name{fcnNum}='GetTriggerTransition'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'TriggerTransitionPtr'};fcnNum=fcnNum+1;
%  ReturnStatus SetTriggerSource ( TriggerSource source ); 
fcns.thunkname{fcnNum}='ReturnStatusTriggerSourceThunk';fcns.name{fcnNum}='SetTriggerSource'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'TriggerSource'};fcnNum=fcnNum+1;
%  ReturnStatus GetTriggerSource ( TriggerSource * source ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrThunk';fcns.name{fcnNum}='GetTriggerSource'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'TriggerSourcePtr'};fcnNum=fcnNum+1;
%  ReturnStatus SetIFPowerTriggerLevel ( double level ); 
fcns.thunkname{fcnNum}='ReturnStatusdoubleThunk';fcns.name{fcnNum}='SetIFPowerTriggerLevel'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
%  ReturnStatus GetIFPowerTriggerLevel ( double * level ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrThunk';fcns.name{fcnNum}='GetIFPowerTriggerLevel'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'doublePtr'};fcnNum=fcnNum+1;
%  ReturnStatus SetStreamADCToDiskEnabled ( bool enabled ); 
fcns.thunkname{fcnNum}='ReturnStatusboolThunk';fcns.name{fcnNum}='SetStreamADCToDiskEnabled'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'bool'};fcnNum=fcnNum+1;
%  ReturnStatus SetStreamADCToDiskPath ( const char * path ); 
fcns.thunkname{fcnNum}='ReturnStatuscstringThunk';fcns.name{fcnNum}='SetStreamADCToDiskPath'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
%  ReturnStatus SetStreamADCToDiskFilenameBase ( const char * path ); 
fcns.thunkname{fcnNum}='ReturnStatuscstringThunk';fcns.name{fcnNum}='SetStreamADCToDiskFilenameBase'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
%  ReturnStatus SetStreamADCToDiskMaxTime ( long milliseconds ); 
fcns.thunkname{fcnNum}='ReturnStatuslongThunk';fcns.name{fcnNum}='SetStreamADCToDiskMaxTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
%  ReturnStatus SetStreamADCToDiskMode ( StreamingMode mode ); 
fcns.thunkname{fcnNum}='ReturnStatusStreamingModeThunk';fcns.name{fcnNum}='SetStreamADCToDiskMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'StreamingMode'};fcnNum=fcnNum+1;
%  ReturnStatus SetStreamADCToDiskMaxFileCount ( int maximum ); 
fcns.thunkname{fcnNum}='ReturnStatusint32Thunk';fcns.name{fcnNum}='SetStreamADCToDiskMaxFileCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  ReturnStatus GetStreamADCToDiskActive ( bool * enabled ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrThunk';fcns.name{fcnNum}='GetStreamADCToDiskActive'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'boolPtr'};fcnNum=fcnNum+1;
%  ReturnStatus GetIQHeader ( IQHeader * header ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrThunk';fcns.name{fcnNum}='GetIQHeader'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'IQHeaderPtr'};fcnNum=fcnNum+1;
%  ReturnStatus GetIQData ( float * iqData , int startIndex , int length ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrint32int32Thunk';fcns.name{fcnNum}='GetIQData'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'singlePtr', 'int32', 'int32'};fcnNum=fcnNum+1;
%  ReturnStatus GetIQDataDeinterleaved ( float * iData , float * qData , int startIndex , int length ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrvoidPtrint32int32Thunk';fcns.name{fcnNum}='GetIQDataDeinterleaved'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'singlePtr', 'singlePtr', 'int32', 'int32'};fcnNum=fcnNum+1;
%  ReturnStatus GetIQDataCplx ( Cplx32 * iqData , int startIndex , int length ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrint32int32Thunk';fcns.name{fcnNum}='GetIQDataCplx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'Cplx32Ptr', 'int32', 'int32'};fcnNum=fcnNum+1;
%  ReturnStatus WaitForIQDataReady ( int timeoutMsec , bool * ready ); 
fcns.thunkname{fcnNum}='ReturnStatusint32voidPtrThunk';fcns.name{fcnNum}='WaitForIQDataReady'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'int32', 'boolPtr'};fcnNum=fcnNum+1;
%  ReturnStatus GetDPXEnabled ( bool * enabled ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrThunk';fcns.name{fcnNum}='GetDPXEnabled'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'boolPtr'};fcnNum=fcnNum+1;
%  ReturnStatus SetDPXEnabled ( bool enabled ); 
fcns.thunkname{fcnNum}='ReturnStatusboolThunk';fcns.name{fcnNum}='SetDPXEnabled'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'bool'};fcnNum=fcnNum+1;
%  ReturnStatus DPX_SetParameters ( double fspan , double rbw , int32_t bitmapWidth , int32_t tracePtsPerPixel , VerticalUnitType yUnit , double yTop , double yBottom , bool infinitePersistence , double persistenceTimeSec , bool showOnlyTrigFrame ); 
fcns.thunkname{fcnNum}='ReturnStatusdoubledoubleint32int32VerticalUnitTypedoubledoublebooldoubleboolThunk';fcns.name{fcnNum}='DPX_SetParameters'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'double', 'double', 'int32', 'int32', 'VerticalUnitType', 'double', 'double', 'bool', 'double', 'bool'};fcnNum=fcnNum+1;
%  ReturnStatus DPX_Configure ( bool enableSpectrum , bool enableSpectrogram ); 
fcns.thunkname{fcnNum}='ReturnStatusboolboolThunk';fcns.name{fcnNum}='DPX_Configure'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'bool', 'bool'};fcnNum=fcnNum+1;
%  ReturnStatus DPX_GetSettings ( DPX_SettingsStruct * pSettings ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrThunk';fcns.name{fcnNum}='DPX_GetSettings'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'DPX_SettingsStructPtr'};fcnNum=fcnNum+1;
%  ReturnStatus DPX_SetSpectrumTraceType ( int32_t traceIndex , TraceType type ); 
fcns.thunkname{fcnNum}='ReturnStatusint32TraceTypeThunk';fcns.name{fcnNum}='DPX_SetSpectrumTraceType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'int32', 'TraceType'};fcnNum=fcnNum+1;
%  ReturnStatus DPX_FindRBWRange ( double fspan , double * minRBW , double * maxRBW ); 
fcns.thunkname{fcnNum}='ReturnStatusdoublevoidPtrvoidPtrThunk';fcns.name{fcnNum}='DPX_FindRBWRange'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'double', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
%  ReturnStatus DPX_ResetDPx (); 
fcns.thunkname{fcnNum}='ReturnStatusThunk';fcns.name{fcnNum}='DPX_ResetDPx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  ReturnStatus DPX_GetFrameInfo ( int64_t * frameCount , int64_t * fftCount ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DPX_GetFrameInfo'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'int64Ptr', 'int64Ptr'};fcnNum=fcnNum+1;
%  ReturnStatus DPX_SetSogramParameters ( double timePerBitmapLine , double timeResolution , double maxPower , double minPower ); 
fcns.thunkname{fcnNum}='ReturnStatusdoubledoubledoubledoubleThunk';fcns.name{fcnNum}='DPX_SetSogramParameters'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'double', 'double', 'double', 'double'};fcnNum=fcnNum+1;
%  ReturnStatus DPX_SetSogramTraceType ( TraceType traceType ); 
fcns.thunkname{fcnNum}='ReturnStatusTraceTypeThunk';fcns.name{fcnNum}='DPX_SetSogramTraceType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'TraceType'};fcnNum=fcnNum+1;
%  ReturnStatus DPX_GetSogramSettings ( DPX_SogramSettingsStruct * pSettings ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrThunk';fcns.name{fcnNum}='DPX_GetSogramSettings'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'DPX_SogramSettingsStructPtr'};fcnNum=fcnNum+1;
%  ReturnStatus DPX_GetSogramHiResLineCountLatest ( int32_t * lineCount ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrThunk';fcns.name{fcnNum}='DPX_GetSogramHiResLineCountLatest'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'int32Ptr'};fcnNum=fcnNum+1;
%  ReturnStatus DPX_GetSogramHiResLineTriggered ( bool * triggered , int32_t lineIndex ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrint32Thunk';fcns.name{fcnNum}='DPX_GetSogramHiResLineTriggered'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'boolPtr', 'int32'};fcnNum=fcnNum+1;
%  ReturnStatus DPX_GetSogramHiResLineTimestamp ( double * timestamp , int32_t lineIndex ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrint32Thunk';fcns.name{fcnNum}='DPX_GetSogramHiResLineTimestamp'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'doublePtr', 'int32'};fcnNum=fcnNum+1;
%  ReturnStatus DPX_GetSogramHiResLine ( int16_t * vData , int32_t * vDataSize , int32_t lineIndex , double * dataSF , int32_t tracePoints , int32_t firstValidPoint ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrvoidPtrint32voidPtrint32int32Thunk';fcns.name{fcnNum}='DPX_GetSogramHiResLine'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'int16Ptr', 'int32Ptr', 'int32', 'doublePtr', 'int32', 'int32'};fcnNum=fcnNum+1;
%  ReturnStatus WaitForDPXDataReady ( int timeoutMsec , bool * ready ); 
fcns.thunkname{fcnNum}='ReturnStatusint32voidPtrThunk';fcns.name{fcnNum}='WaitForDPXDataReady'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'int32', 'boolPtr'};fcnNum=fcnNum+1;
%  ReturnStatus DPX_GetFrameBuffer ( DPX_FrameBuffer * frameBuffer ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrThunk';fcns.name{fcnNum}='DPX_GetFrameBuffer'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'DPX_FrameBufferPtr'};fcnNum=fcnNum+1;
%  ReturnStatus DPX_FinishFrameBuffer (); 
fcns.thunkname{fcnNum}='ReturnStatusThunk';fcns.name{fcnNum}='DPX_FinishFrameBuffer'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  ReturnStatus DPX_IsFrameBufferAvailable ( bool * frameAvailable ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrThunk';fcns.name{fcnNum}='DPX_IsFrameBufferAvailable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'boolPtr'};fcnNum=fcnNum+1;
%  ReturnStatus AUDIO_StartAudio (); 
fcns.thunkname{fcnNum}='ReturnStatusThunk';fcns.name{fcnNum}='AUDIO_StartAudio'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  ReturnStatus AUDIO_StopAudio (); 
fcns.thunkname{fcnNum}='ReturnStatusThunk';fcns.name{fcnNum}='AUDIO_StopAudio'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  ReturnStatus AUDIO_Running ( bool * _running ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrThunk';fcns.name{fcnNum}='AUDIO_Running'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'boolPtr'};fcnNum=fcnNum+1;
%  ReturnStatus AUDIO_GetData ( int16_t * data , uint16_t inSize , uint16_t * outSize ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtruint16voidPtrThunk';fcns.name{fcnNum}='AUDIO_GetData'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'int16Ptr', 'uint16', 'uint16Ptr'};fcnNum=fcnNum+1;
%  ReturnStatus AUDIO_SetMode ( AudioDemodMode mode ); 
fcns.thunkname{fcnNum}='ReturnStatusAudioDemodModeThunk';fcns.name{fcnNum}='AUDIO_SetMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'AudioDemodMode'};fcnNum=fcnNum+1;
%  ReturnStatus AUDIO_GetMode ( AudioDemodMode * _mode ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrThunk';fcns.name{fcnNum}='AUDIO_GetMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'AudioDemodModePtr'};fcnNum=fcnNum+1;
%  ReturnStatus AUDIO_SetVolume ( float volume ); 
fcns.thunkname{fcnNum}='ReturnStatusfloatThunk';fcns.name{fcnNum}='AUDIO_SetVolume'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'single'};fcnNum=fcnNum+1;
%  ReturnStatus AUDIO_GetVolume ( float * _volume ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrThunk';fcns.name{fcnNum}='AUDIO_GetVolume'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'singlePtr'};fcnNum=fcnNum+1;
%  ReturnStatus AUDIO_SetMute ( bool mute ); 
fcns.thunkname{fcnNum}='ReturnStatusboolThunk';fcns.name{fcnNum}='AUDIO_SetMute'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'bool'};fcnNum=fcnNum+1;
%  ReturnStatus AUDIO_GetMute ( bool * _mute ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrThunk';fcns.name{fcnNum}='AUDIO_GetMute'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'boolPtr'};fcnNum=fcnNum+1;
%  ReturnStatus POST_QueryStatus (); 
fcns.thunkname{fcnNum}='ReturnStatusThunk';fcns.name{fcnNum}='POST_QueryStatus'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  double GetDeviceTemperature (); 
fcns.thunkname{fcnNum}='doubleThunk';fcns.name{fcnNum}='GetDeviceTemperature'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  ReturnStatus RunAlignment (); 
fcns.thunkname{fcnNum}='ReturnStatusThunk';fcns.name{fcnNum}='RunAlignment'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  ReturnStatus IsAlignmentNeeded ( bool * needed ); 
fcns.thunkname{fcnNum}='ReturnStatusvoidPtrThunk';fcns.name{fcnNum}='IsAlignmentNeeded'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ReturnStatus'; fcns.RHS{fcnNum}={'boolPtr'};fcnNum=fcnNum+1;
structs.IQHeader.members=struct('acqDataStatus', 'uint16', 'acquisitionTimestamp', 'uint64', 'frameID', 'uint32', 'trigger1Index', 'uint16', 'trigger2Index', 'uint16', 'timeSyncIndex', 'uint16');
structs.Cplx32.members=struct('i', 'single', 'q', 'single');
structs.DPX_FrameBuffer.members=struct('fftPerFrame', 'int32', 'fftCount', 'int64', 'frameCount', 'int64', 'timestamp', 'double', 'acqDataStatus', 'uint32', 'minSigDuration', 'double', 'minSigDurOutOfRange', 'bool', 'spectrumBitmapWidth', 'int32', 'spectrumBitmapHeight', 'int32', 'spectrumBitmapSize', 'int32', 'spectrumTraceLength', 'int32', 'numSpectrumTraces', 'int32', 'spectrumEnabled', 'bool', 'spectrogramEnabled', 'bool', 'spectrumBitmap', 'singlePtr', 'spectrumTraces', 'singlePtrPtr', 'sogramBitmapWidth', 'int32', 'sogramBitmapHeight', 'int32', 'sogramBitmapSize', 'int32', 'sogramBitmapNumValidLines', 'int32', 'sogramBitmap', 'uint8Ptr', 'sogramBitmapTimestampArray', 'doublePtr', 'sogramBitmapContainTriggerArray', 'int16Ptr');
structs.DPX_SogramSettingsStruct.members=struct('bitmapWidth', 'int32', 'bitmapHeight', 'int32', 'sogramTraceLineTime', 'double', 'sogramBitmapLineTime', 'double');
structs.DPX_SettingsStruct.members=struct('enableSpectrum', 'bool', 'enableSpectrogram', 'bool', 'bitmapWidth', 'int32', 'bitmapHeight', 'int32', 'traceLength', 'int32', 'decayFactor', 'single', 'actualRBW', 'double');
enuminfo.AcqDataStatus=struct('adcOverrange',1,'refFreqUnlock',2,'lo1Unlock',4,'lo2Unlock',8,'lowSupplyVoltage',16,'adcDataLost',32,'event1pps',64,'eventTrig1',128,'eventTrig2',256);
enuminfo.TraceType=struct('TraceTypeAverage',0,'TraceTypeMax',1,'TraceTypeMaxHold',2,'TraceTypeMin',3,'TraceTypeMinHold',4);
enuminfo.TriggerTransition=struct('TriggerTransitionLH',1,'TriggerTransitionHL',2,'TriggerTransitionEither',3);
enuminfo.TriggerSource=struct('TriggerSourceExternal',0,'TriggerSourceIFPowerLevel',1);
enuminfo.ReturnStatus=struct('noError',0,'errorNotConnected',1,'errorTimeout',2,'errorTransfer',3,'errorFileOpen',4,'errorParameter',5,'errorDataNotReady',6,'errorInvalidCalibConstantFileFormat',7,'errorMismatchCalibConstantsSize',8,'errorFailed',9,'errorCRC',10,'errorWriteCalConfigHeader',11,'errorWriteCalConfigData',12,'errorReadCalConfigHeader',13,'errorReadCalConfigData',14,'errorEraseCalConfig',15,'errorCalConfigFileSize',16,'errorChangeToFlashMode',17,'errorChangeToRunMode',18,'errorIncompatibleFirmware',19,'errorBootLoaderNotRunning',20,'errorStreamADCToDiskFileOpen',21,'errorStreamADCToDiskAlreadyStreaming',22,'errorStreamADCToDiskBadPath',23,'errorStreamADCToDiskThreadFailure',24,'errorRebootFailure',25,'errorLOLockFailure',26,'errorPOSTFailureFPGALoad',27,'errorPOSTFailureHiPower',28,'errorPOSTFailureI2C',29,'errorPOSTFailureGPIF',30,'errorPOSTFailureUsbSpeed',31,'errorDSPLError',32,'errorDisconnectedDeviceRemoved',33,'errorDisconnectedDeviceNodeChangedAndRemoved',34,'errorDisconnectedTimeoutWaitingForADcData',35,'errorDisconnectedIOBeginTransfer',36,'errorPlaceholder',9999,'notImplemented',-1);
enuminfo.AudioDemodMode=struct('ADM_FM_8KHZ',0,'ADM_FM_13KHZ',1,'ADM_FM_75KHZ',2,'ADM_FM_200KHZ',3,'ADM_AM_8KHZ',4);
enuminfo.RunMode=struct('stopped',0,'running',1);
enuminfo.VerticalUnitType=struct('VerticalUnit_dBm',0,'VerticalUnit_Watt',1,'VerticalUnit_Volt',2,'VerticalUnit_Amp',3);
enuminfo.StreamingMode=struct('StreamingModeRaw',0,'StreamingModeFramed',1);
enuminfo.TriggerMode=struct('freeRun',0,'triggered',1);
methodinfo=fcns;